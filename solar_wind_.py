# -*- coding: utf-8 -*-
"""solar_wind .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pCCI5LvBdln3VJNPJvPMrMP1RT4WOJ7F
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor, HistGradientBoostingRegressor
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, clear_output
import joblib
import matplotlib.pyplot as plt

# Load dataset
data = pd.read_csv('/content/Real_time_dataset.csv')

# Preprocess the data
data.fillna(data.mean(), inplace=True)

# Select features and target variable
X = data[['bx_gsm', 'by_gsm', 'bz_gsm', 'theta_gsm', 'phi_gsm',
          'density', 'speed', 'temperature']]
y = data['bt']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Gradient Boosting Regressor
gb_regr = GradientBoostingRegressor(random_state=42)
gb_regr.fit(X_train_scaled, y_train)

# Train HistGradientBoostingRegressor
hist_gb_regr = HistGradientBoostingRegressor(random_state=42)
hist_gb_regr.fit(X_train_scaled, y_train)

# Save the trained models and scaler
joblib.dump(gb_regr, 'gradient_boosting_regressor.pkl')
joblib.dump(hist_gb_regr, 'hist_gradient_boosting_regressor.pkl')
joblib.dump(scaler, 'scaler.pkl')

print("Models trained and saved successfully!")

# Load the scaler
scaler = joblib.load('scaler.pkl')

# Input widgets
input_widgets_all = [
    widgets.FloatText(description=col, value=0) for col in X.columns
]

# GUI for prediction
input_text = widgets.Textarea(
    value='',
    placeholder='Enter all values separated by commas',
    description='Input:',
    disabled=False
)

clear_button = widgets.Button(description='Clear Output')
output = widgets.Output()

def clear_output_field(_):
    with output:
        output.clear_output(wait=True)  # Clear the text output
        plt.close()  # Clear the plot

clear_button.on_click(clear_output_field)

def update_all_input(change):
    separate_values = [str(widget.value) for widget in input_widgets_all]
    all_input = ', '.join(separate_values)
    input_text.value = all_input

def update_separate_input(change):
    all_input = input_text.value
    separate_values = all_input.split(',')
    for i, value in enumerate(separate_values):
        if i < len(input_widgets_all):
            input_widgets_all[i].value = float(value.strip())

def predict_bt(b):
    input_values = [widget.value for widget in input_widgets_all]
    input_array = scaler.transform([input_values])
    gb_prediction = gb_regr.predict(input_array)[0]
    hist_gb_prediction = hist_gb_regr.predict(input_array)[0]

    with output:
        output.clear_output()
        print("Predictions:")
        print(f"Gradient Boosting Regressor: {gb_prediction}")
        print(f"HistGradient Boosting Regressor: {hist_gb_prediction}")

    # Plotting
    labels = ['Gradient Boosting', 'HistGradient Boosting']
    predicted_values = [gb_prediction, hist_gb_prediction]
    plt.bar(labels, predicted_values, color=['blue', 'orange'])
    plt.ylabel('Predicted bt')
    plt.title('Predicted bt values for both models')
    plt.show()

# Observers
for widget in input_widgets_all:
    widget.observe(update_all_input, names='value')

input_text.observe(update_separate_input, names='value')

predict_button = widgets.Button(description='Predict')
predict_button.on_click(predict_bt)

display(*input_widgets_all, input_text, predict_button, clear_button, output)

